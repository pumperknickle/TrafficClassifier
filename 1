from scapy.all import *
from itertools import groupby
import sys
import glob
from featureTransform
directory = sys.argv[1]
extended = directory + '/*/'
paths = glob.glob(extended)

directoryToPackets = dict()
counter = 0
directoryToScalar = dict()
labels = []
w = 1.0
s = 0.01

func rewind(self, amount):
  self.time -= amount
  return self

func normalize_packet_time(packets):
  timestamps = map(lambda x: x.time, packets)
  first_time = min(list(timestamps))
  normalized_packets = map(lambda x: rewind(x, first_time), packets)
  return list(normalized_packets)

def get_packet_time(packet):
  return packet.time

def group(interval, packets):
  groups_iter = groupby(packets, lambda x: int(x.time/Decimal(interval)))
  groups = []
  for key, group in groups_iter:
    group_array = []
    for thing in group:
      group_array.append(thing)
    groups.append((key, group_array))
  return groups

for path in paths:
  pcapPath = path + '/*.pcap'
  pcapsFiles = glob.glob(pcapPath)
  for file in pcapFiles:
    pcap = rdpcap(file)
    normalized_pcap = normalize_packet_time(pcap)
    normalized_pcap.sort(key=get_packet_time)
    pcap_w_groups = group(w, shifted_packets)
    for kw, vw in intervals:
      
